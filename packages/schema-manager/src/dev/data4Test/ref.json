[
  {
    "description": "root pointer ref",
    "schema": {
      "properties": {
        "foo": {
          "$ref": "#"
        }
      },
      "additionalProperties": false,
      "$id": "{properties:{foo:{$ref:#}},additionalproperties:false}"
    },
    "ref": "#",
    "result": {
      "schema": {
        "properties": {
          "foo": {
            "$ref": "#"
          }
        },
        "additionalProperties": false,
        "$id": "{properties:{foo:{$ref:#}},additionalproperties:false}"
      },
      "referenced": {
        "properties": {
          "foo": {
            "$ref": "#"
          }
        },
        "additionalProperties": false,
        "$id": "{properties:{foo:{$ref:#}},additionalproperties:false}"
      }
    }
  },
  {
    "description": "relative pointer ref to object",
    "schema": {
      "properties": {
        "foo": {
          "type": "integer"
        },
        "bar": {
          "$ref": "#/properties/foo"
        }
      },
      "$id": "{properties:{foo:{type:integer},bar:{$ref:#/properties/foo}}}"
    },
    "ref": "#/properties/foo",
    "result": {
      "schema": {
        "properties": {
          "foo": {
            "type": "integer"
          },
          "bar": {
            "$ref": "#/properties/foo"
          }
        },
        "$id": "{properties:{foo:{type:integer},bar:{$ref:#/properties/foo}}}"
      },
      "referenced": {
        "type": "integer"
      }
    }
  },
  {
    "description": "relative pointer ref to array",
    "schema": {
      "prefixItems": [
        {
          "type": "integer"
        },
        {
          "$ref": "#/prefixItems/0"
        }
      ],
      "$id": "{prefixitems:[{type:integer},{$ref:#/prefixitems/0}]}"
    },
    "ref": "#/prefixItems/0",
    "result": {
      "schema": {
        "prefixItems": [
          {
            "type": "integer"
          },
          {
            "$ref": "#/prefixItems/0"
          }
        ],
        "$id": "{prefixitems:[{type:integer},{$ref:#/prefixitems/0}]}"
      },
      "referenced": {
        "type": "integer"
      }
    }
  },
  {
    "description": "escaped pointer ref",
    "schema": {
      "$defs": {
        "tilde~field": {
          "type": "integer"
        },
        "slash/field": {
          "type": "integer"
        },
        "percent%field": {
          "type": "integer"
        }
      },
      "properties": {
        "tilde": {
          "$ref": "#/$defs/tilde~0field"
        },
        "slash": {
          "$ref": "#/$defs/slash~1field"
        },
        "percent": {
          "$ref": "#/$defs/percent%25field"
        }
      },
      "$id": "{$defs:{tilde~field:{type:integer},slash/field:{type:integer},percent%field:{type:integer}},properties:{tilde:{$ref:#/$defs/tilde~0field},slash:{$ref:#/$defs/slash~1field},percent:{$ref:#/$defs/percent%25field}}}"
    },
    "ref": "#/$defs/tilde~0field",
    "result": {
      "schema": {
        "$defs": {
          "tilde~field": {
            "type": "integer"
          },
          "slash/field": {
            "type": "integer"
          },
          "percent%field": {
            "type": "integer"
          }
        },
        "properties": {
          "tilde": {
            "$ref": "#/$defs/tilde~0field"
          },
          "slash": {
            "$ref": "#/$defs/slash~1field"
          },
          "percent": {
            "$ref": "#/$defs/percent%25field"
          }
        },
        "$id": "{$defs:{tilde~field:{type:integer},slash/field:{type:integer},percent%field:{type:integer}},properties:{tilde:{$ref:#/$defs/tilde~0field},slash:{$ref:#/$defs/slash~1field},percent:{$ref:#/$defs/percent%25field}}}"
      },
      "referenced": {
        "type": "integer"
      }
    }
  },
  {
    "description": "escaped pointer ref",
    "schema": {
      "$defs": {
        "tilde~field": {
          "type": "integer"
        },
        "slash/field": {
          "type": "integer"
        },
        "percent%field": {
          "type": "integer"
        }
      },
      "properties": {
        "tilde": {
          "$ref": "#/$defs/tilde~0field"
        },
        "slash": {
          "$ref": "#/$defs/slash~1field"
        },
        "percent": {
          "$ref": "#/$defs/percent%25field"
        }
      },
      "$id": "{$defs:{tilde~field:{type:integer},slash/field:{type:integer},percent%field:{type:integer}},properties:{tilde:{$ref:#/$defs/tilde~0field},slash:{$ref:#/$defs/slash~1field},percent:{$ref:#/$defs/percent%25field}}}"
    },
    "ref": "#/$defs/slash~1field",
    "result": {
      "schema": {
        "$defs": {
          "tilde~field": {
            "type": "integer"
          },
          "slash/field": {
            "type": "integer"
          },
          "percent%field": {
            "type": "integer"
          }
        },
        "properties": {
          "tilde": {
            "$ref": "#/$defs/tilde~0field"
          },
          "slash": {
            "$ref": "#/$defs/slash~1field"
          },
          "percent": {
            "$ref": "#/$defs/percent%25field"
          }
        },
        "$id": "{$defs:{tilde~field:{type:integer},slash/field:{type:integer},percent%field:{type:integer}},properties:{tilde:{$ref:#/$defs/tilde~0field},slash:{$ref:#/$defs/slash~1field},percent:{$ref:#/$defs/percent%25field}}}"
      },
      "referenced": {
        "type": "integer"
      }
    }
  },
  {
    "description": "escaped pointer ref",
    "schema": {
      "$defs": {
        "tilde~field": {
          "type": "integer"
        },
        "slash/field": {
          "type": "integer"
        },
        "percent%field": {
          "type": "integer"
        }
      },
      "properties": {
        "tilde": {
          "$ref": "#/$defs/tilde~0field"
        },
        "slash": {
          "$ref": "#/$defs/slash~1field"
        },
        "percent": {
          "$ref": "#/$defs/percent%25field"
        }
      },
      "$id": "{$defs:{tilde~field:{type:integer},slash/field:{type:integer},percent%field:{type:integer}},properties:{tilde:{$ref:#/$defs/tilde~0field},slash:{$ref:#/$defs/slash~1field},percent:{$ref:#/$defs/percent%25field}}}"
    },
    "ref": "#/$defs/percent%25field",
    "result": {
      "schema": {
        "$defs": {
          "tilde~field": {
            "type": "integer"
          },
          "slash/field": {
            "type": "integer"
          },
          "percent%field": {
            "type": "integer"
          }
        },
        "properties": {
          "tilde": {
            "$ref": "#/$defs/tilde~0field"
          },
          "slash": {
            "$ref": "#/$defs/slash~1field"
          },
          "percent": {
            "$ref": "#/$defs/percent%25field"
          }
        },
        "$id": "{$defs:{tilde~field:{type:integer},slash/field:{type:integer},percent%field:{type:integer}},properties:{tilde:{$ref:#/$defs/tilde~0field},slash:{$ref:#/$defs/slash~1field},percent:{$ref:#/$defs/percent%25field}}}"
      },
      "referenced": {
        "type": "integer"
      }
    }
  },
  {
    "description": "nested refs",
    "schema": {
      "$defs": {
        "a": {
          "type": "integer"
        },
        "b": {
          "$ref": "#/$defs/a"
        },
        "c": {
          "$ref": "#/$defs/b"
        }
      },
      "$ref": "#/$defs/c",
      "$id": "{$defs:{a:{type:integer},b:{$ref:#/$defs/a},c:{$ref:#/$defs/b}},$ref:#/$defs/c}"
    },
    "ref": "#/$defs/c",
    "result": {
      "schema": {
        "$defs": {
          "a": {
            "type": "integer"
          },
          "b": {
            "$ref": "#/$defs/a"
          },
          "c": {
            "$ref": "#/$defs/b"
          }
        },
        "$ref": "#/$defs/c",
        "$id": "{$defs:{a:{type:integer},b:{$ref:#/$defs/a},c:{$ref:#/$defs/b}},$ref:#/$defs/c}"
      },
      "referenced": {
        "$ref": "#/$defs/b"
      }
    }
  },
  {
    "description": "nested refs",
    "schema": {
      "$defs": {
        "a": {
          "type": "integer"
        },
        "b": {
          "$ref": "#/$defs/a"
        },
        "c": {
          "$ref": "#/$defs/b"
        }
      },
      "$ref": "#/$defs/c",
      "$id": "{$defs:{a:{type:integer},b:{$ref:#/$defs/a},c:{$ref:#/$defs/b}},$ref:#/$defs/c}"
    },
    "ref": "#/$defs/a",
    "result": {
      "schema": {
        "$defs": {
          "a": {
            "type": "integer"
          },
          "b": {
            "$ref": "#/$defs/a"
          },
          "c": {
            "$ref": "#/$defs/b"
          }
        },
        "$ref": "#/$defs/c",
        "$id": "{$defs:{a:{type:integer},b:{$ref:#/$defs/a},c:{$ref:#/$defs/b}},$ref:#/$defs/c}"
      },
      "referenced": {
        "type": "integer"
      }
    }
  },
  {
    "description": "nested refs",
    "schema": {
      "$defs": {
        "a": {
          "type": "integer"
        },
        "b": {
          "$ref": "#/$defs/a"
        },
        "c": {
          "$ref": "#/$defs/b"
        }
      },
      "$ref": "#/$defs/c",
      "$id": "{$defs:{a:{type:integer},b:{$ref:#/$defs/a},c:{$ref:#/$defs/b}},$ref:#/$defs/c}"
    },
    "ref": "#/$defs/b",
    "result": {
      "schema": {
        "$defs": {
          "a": {
            "type": "integer"
          },
          "b": {
            "$ref": "#/$defs/a"
          },
          "c": {
            "$ref": "#/$defs/b"
          }
        },
        "$ref": "#/$defs/c",
        "$id": "{$defs:{a:{type:integer},b:{$ref:#/$defs/a},c:{$ref:#/$defs/b}},$ref:#/$defs/c}"
      },
      "referenced": {
        "$ref": "#/$defs/a"
      }
    }
  },
  {
    "description": "ref applies alongside sibling keywords",
    "schema": {
      "$defs": {
        "reffed": {
          "type": "array"
        }
      },
      "properties": {
        "foo": {
          "$ref": "#/$defs/reffed",
          "maxItems": 2
        }
      },
      "$id": "{$defs:{reffed:{type:array}},properties:{foo:{$ref:#/$defs/reffed,maxitems:2}}}"
    },
    "ref": "#/$defs/reffed",
    "result": {
      "schema": {
        "$defs": {
          "reffed": {
            "type": "array"
          }
        },
        "properties": {
          "foo": {
            "$ref": "#/$defs/reffed",
            "maxItems": 2
          }
        },
        "$id": "{$defs:{reffed:{type:array}},properties:{foo:{$ref:#/$defs/reffed,maxitems:2}}}"
      },
      "referenced": {
        "type": "array"
      }
    }
  },
  {
    "description": "remote ref, containing refs itself",
    "schema": {
      "$ref": "https://json-schema.org/draft/2020-12/schema",
      "$id": "{$ref:https://json-schema.org/draft/2020-12/schema}"
    },
    "ref": "https://json-schema.org/draft/2020-12/schema",
    "result": {
      "schema": {
        "$id": "https://json-schema.org/draft/2020-12/schema",
        "$vocabulary": {
          "https://json-schema.org/draft/2020-12/vocab/core": true,
          "https://json-schema.org/draft/2020-12/vocab/applicator": true,
          "https://json-schema.org/draft/2020-12/vocab/unevaluated": true,
          "https://json-schema.org/draft/2020-12/vocab/validation": true,
          "https://json-schema.org/draft/2020-12/vocab/meta-data": true,
          "https://json-schema.org/draft/2020-12/vocab/format-annotation": true,
          "https://json-schema.org/draft/2020-12/vocab/content": true
        },
        "$dynamicAnchor": "meta",
        "title": "Core and Validation specifications meta-schema",
        "allOf": [
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/core"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/applicator"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/unevaluated"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/validation"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/meta-data"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/format-annotation"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/content"
          }
        ],
        "type": [
          "object",
          "boolean"
        ],
        "properties": {
          "definitions": {
            "type": "object",
            "additionalProperties": {
              "$dynamicRef": "#meta"
            },
            "deprecated": true,
            "default": {}
          },
          "dependencies": {
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                {
                  "$dynamicRef": "#meta"
                },
                {
                  "$ref": "https://json-schema.org/draft/2020-12/meta/validation#/$defs/stringArray"
                }
              ]
            },
            "deprecated": true,
            "default": {}
          },
          "$recursiveAnchor": {
            "$ref": "https://json-schema.org/draft/2020-12/meta/core#/$defs/anchorString",
            "deprecated": true
          },
          "$recursiveRef": {
            "$ref": "https://json-schema.org/draft/2020-12/meta/core#/$defs/uriReferenceString",
            "deprecated": true
          }
        }
      },
      "referenced": {
        "$id": "https://json-schema.org/draft/2020-12/schema",
        "$vocabulary": {
          "https://json-schema.org/draft/2020-12/vocab/core": true,
          "https://json-schema.org/draft/2020-12/vocab/applicator": true,
          "https://json-schema.org/draft/2020-12/vocab/unevaluated": true,
          "https://json-schema.org/draft/2020-12/vocab/validation": true,
          "https://json-schema.org/draft/2020-12/vocab/meta-data": true,
          "https://json-schema.org/draft/2020-12/vocab/format-annotation": true,
          "https://json-schema.org/draft/2020-12/vocab/content": true
        },
        "$dynamicAnchor": "meta",
        "title": "Core and Validation specifications meta-schema",
        "allOf": [
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/core"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/applicator"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/unevaluated"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/validation"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/meta-data"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/format-annotation"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/content"
          }
        ],
        "type": [
          "object",
          "boolean"
        ],
        "properties": {
          "definitions": {
            "type": "object",
            "additionalProperties": {
              "$dynamicRef": "#meta"
            },
            "deprecated": true,
            "default": {}
          },
          "dependencies": {
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                {
                  "$dynamicRef": "#meta"
                },
                {
                  "$ref": "https://json-schema.org/draft/2020-12/meta/validation#/$defs/stringArray"
                }
              ]
            },
            "deprecated": true,
            "default": {}
          },
          "$recursiveAnchor": {
            "$ref": "https://json-schema.org/draft/2020-12/meta/core#/$defs/anchorString",
            "deprecated": true
          },
          "$recursiveRef": {
            "$ref": "https://json-schema.org/draft/2020-12/meta/core#/$defs/uriReferenceString",
            "deprecated": true
          }
        }
      }
    }
  },
  {
    "description": "property named $ref, containing an actual $ref",
    "schema": {
      "properties": {
        "$ref": {
          "$ref": "#/$defs/is-string"
        }
      },
      "$defs": {
        "is-string": {
          "type": "string"
        }
      },
      "$id": "{properties:{$ref:{$ref:#/$defs/is-string}},$defs:{is-string:{type:string}}}"
    },
    "ref": "#/$defs/is-string",
    "result": {
      "schema": {
        "properties": {
          "$ref": {
            "$ref": "#/$defs/is-string"
          }
        },
        "$defs": {
          "is-string": {
            "type": "string"
          }
        },
        "$id": "{properties:{$ref:{$ref:#/$defs/is-string}},$defs:{is-string:{type:string}}}"
      },
      "referenced": {
        "type": "string"
      }
    }
  },
  {
    "description": "$ref to boolean schema true",
    "schema": {
      "$ref": "#/$defs/bool",
      "$defs": {
        "bool": true
      },
      "$id": "{$ref:#/$defs/bool,$defs:{bool:true}}"
    },
    "ref": "#/$defs/bool",
    "result": {
      "schema": {
        "$ref": "#/$defs/bool",
        "$defs": {
          "bool": true
        },
        "$id": "{$ref:#/$defs/bool,$defs:{bool:true}}"
      },
      "referenced": true
    }
  },
  {
    "description": "$ref to boolean schema false",
    "schema": {
      "$ref": "#/$defs/bool",
      "$defs": {
        "bool": false
      },
      "$id": "{$ref:#/$defs/bool,$defs:{bool:false}}"
    },
    "ref": "#/$defs/bool",
    "result": {
      "schema": {
        "$ref": "#/$defs/bool",
        "$defs": {
          "bool": false
        },
        "$id": "{$ref:#/$defs/bool,$defs:{bool:false}}"
      },
      "referenced": false
    }
  },
  {
    "description": "Recursive references between schemas",
    "schema": {
      "$id": "http://localhost:1234/draft2020-12/tree",
      "type": "object",
      "properties": {
        "meta": {
          "type": "string"
        },
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/node"
          }
        }
      },
      "required": [
        "meta",
        "nodes"
      ],
      "$defs": {
        "node": {
          "$id": "http://localhost:1234/draft2020-12/node",
          "type": "object",
          "properties": {
            "value": {
              "type": "number"
            },
            "subtree": {
              "$ref": "#"
            }
          },
          "required": [
            "value"
          ]
        }
      }
    },
    "ref": "#/$defs/node",
    "result": {
      "schema": {
        "$id": "http://localhost:1234/draft2020-12/tree",
        "type": "object",
        "properties": {
          "meta": {
            "type": "string"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/node"
            }
          }
        },
        "required": [
          "meta",
          "nodes"
        ],
        "$defs": {
          "node": {
            "$id": "http://localhost:1234/draft2020-12/node",
            "type": "object",
            "properties": {
              "value": {
                "type": "number"
              },
              "subtree": {
                "$ref": "#"
              }
            },
            "required": [
              "value"
            ]
          }
        }
      },
      "referenced": {
        "$id": "http://localhost:1234/draft2020-12/node",
        "type": "object",
        "properties": {
          "value": {
            "type": "number"
          },
          "subtree": {
            "$ref": "#"
          }
        },
        "required": [
          "value"
        ]
      }
    }
  },
  {
    "description": "Recursive references between schemas",
    "schema": {
      "$id": "http://localhost:1234/draft2020-12/tree",
      "type": "object",
      "properties": {
        "meta": {
          "type": "string"
        },
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/node"
          }
        }
      },
      "required": [
        "meta",
        "nodes"
      ],
      "$defs": {
        "node": {
          "$id": "http://localhost:1234/draft2020-12/node",
          "type": "object",
          "properties": {
            "value": {
              "type": "number"
            },
            "subtree": {
              "$ref": "#"
            }
          },
          "required": [
            "value"
          ]
        }
      }
    },
    "ref": "#",
    "result": {
      "schema": {
        "$id": "http://localhost:1234/draft2020-12/tree",
        "type": "object",
        "properties": {
          "meta": {
            "type": "string"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/node"
            }
          }
        },
        "required": [
          "meta",
          "nodes"
        ],
        "$defs": {
          "node": {
            "$id": "http://localhost:1234/draft2020-12/node",
            "type": "object",
            "properties": {
              "value": {
                "type": "number"
              },
              "subtree": {
                "$ref": "#"
              }
            },
            "required": [
              "value"
            ]
          }
        }
      },
      "referenced": {
        "$id": "http://localhost:1234/draft2020-12/tree",
        "type": "object",
        "properties": {
          "meta": {
            "type": "string"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/$defs/node"
            }
          }
        },
        "required": [
          "meta",
          "nodes"
        ],
        "$defs": {
          "node": {
            "$id": "http://localhost:1234/draft2020-12/node",
            "type": "object",
            "properties": {
              "value": {
                "type": "number"
              },
              "subtree": {
                "$ref": "#"
              }
            },
            "required": [
              "value"
            ]
          }
        }
      }
    }
  },
  {
    "description": "refs with quote",
    "schema": {
      "properties": {
        "foo\"bar": {
          "$ref": "#/$defs/foo%22bar"
        }
      },
      "$defs": {
        "foo\"bar": {
          "type": "number"
        }
      },
      "$id": "{properties:{foo\"bar:{$ref:#/$defs/foo%22bar}},$defs:{foo\"bar:{type:number}}}"
    },
    "ref": "#/$defs/foo%22bar",
    "result": {
      "schema": {
        "properties": {
          "foo\"bar": {
            "$ref": "#/$defs/foo%22bar"
          }
        },
        "$defs": {
          "foo\"bar": {
            "type": "number"
          }
        },
        "$id": "{properties:{foo\"bar:{$ref:#/$defs/foo%22bar}},$defs:{foo\"bar:{type:number}}}"
      },
      "referenced": {
        "type": "number"
      }
    }
  },
  {
    "description": "ref creates new scope when adjacent to keywords",
    "schema": {
      "$defs": {
        "A": {
          "unevaluatedProperties": false
        }
      },
      "properties": {
        "prop1": {
          "type": "string"
        }
      },
      "$ref": "#/$defs/A",
      "$id": "{$defs:{a:{unevaluatedproperties:false}},properties:{prop1:{type:string}},$ref:#/$defs/a}"
    },
    "ref": "#/$defs/A",
    "result": {
      "schema": {
        "$defs": {
          "A": {
            "unevaluatedProperties": false
          }
        },
        "properties": {
          "prop1": {
            "type": "string"
          }
        },
        "$ref": "#/$defs/A",
        "$id": "{$defs:{a:{unevaluatedproperties:false}},properties:{prop1:{type:string}},$ref:#/$defs/a}"
      },
      "referenced": {
        "unevaluatedProperties": false
      }
    }
  },
  {
    "description": "naive replacement of $ref with its destination is not correct",
    "schema": {
      "$defs": {
        "a_string": {
          "type": "string"
        }
      },
      "enum": [
        {
          "$ref": "#/$defs/a_string"
        }
      ],
      "$id": "{$defs:{a_string:{type:string}},enum:[{$ref:#/$defs/a_string}]}"
    },
    "ref": "#/$defs/a_string",
    "result": {
      "schema": {
        "$defs": {
          "a_string": {
            "type": "string"
          }
        },
        "enum": [
          {
            "$ref": "#/$defs/a_string"
          }
        ],
        "$id": "{$defs:{a_string:{type:string}},enum:[{$ref:#/$defs/a_string}]}"
      },
      "referenced": {
        "type": "string"
      }
    }
  },
  {
    "description": "refs with relative uris and defs",
    "schema": {
      "$id": "http://example.com/schema-relative-uri-defs1.json",
      "properties": {
        "foo": {
          "$id": "http://example.com/schema-relative-uri-defs2.json",
          "$defs": {
            "inner": {
              "properties": {
                "bar": {
                  "type": "string"
                }
              }
            }
          },
          "$ref": "#/properties/foo/$defs/inner"
        }
      },
      "$ref": "#/properties/foo"
    },
    "ref": "#/properties/foo",
    "result": {
      "schema": {
        "$id": "http://example.com/schema-relative-uri-defs1.json",
        "properties": {
          "foo": {
            "$id": "http://example.com/schema-relative-uri-defs2.json",
            "$defs": {
              "inner": {
                "properties": {
                  "bar": {
                    "type": "string"
                  }
                }
              }
            },
            "$ref": "#/properties/foo/$defs/inner"
          }
        },
        "$ref": "#/properties/foo"
      },
      "referenced": {
        "$id": "http://example.com/schema-relative-uri-defs2.json",
        "$defs": {
          "inner": {
            "properties": {
              "bar": {
                "type": "string"
              }
            }
          }
        },
        "$ref": "#/properties/foo/$defs/inner"
      }
    }
  },
  {
    "description": "refs with relative uris and defs",
    "schema": {
      "$id": "http://example.com/schema-relative-uri-defs1.json",
      "properties": {
        "foo": {
          "$id": "http://example.com/schema-relative-uri-defs2.json",
          "$defs": {
            "inner": {
              "properties": {
                "bar": {
                  "type": "string"
                }
              }
            }
          },
          "$ref": "#/properties/foo/$defs/inner"
        }
      },
      "$ref": "#/properties/foo"
    },
    "ref": "#/properties/foo/$defs/inner",
    "result": {
      "schema": {
        "$id": "http://example.com/schema-relative-uri-defs1.json",
        "properties": {
          "foo": {
            "$id": "http://example.com/schema-relative-uri-defs2.json",
            "$defs": {
              "inner": {
                "properties": {
                  "bar": {
                    "type": "string"
                  }
                }
              }
            },
            "$ref": "#/properties/foo/$defs/inner"
          }
        },
        "$ref": "#/properties/foo"
      },
      "referenced": {
        "properties": {
          "bar": {
            "type": "string"
          }
        }
      }
    }
  },
  {
    "description": "relative refs with absolute uris and defs",
    "schema": {
      "$id": "http://example.com/schema-refs-absolute-uris-defs1.json",
      "properties": {
        "foo": {
          "$id": "http://example.com/schema-refs-absolute-uris-defs2.json",
          "$defs": {
            "inner": {
              "properties": {
                "bar": {
                  "type": "string"
                }
              }
            }
          },
          "$ref": "#/properties/foo/$defs/inner"
        }
      },
      "$ref": "#/properties/foo"
    },
    "ref": "#/properties/foo",
    "result": {
      "schema": {
        "$id": "http://example.com/schema-refs-absolute-uris-defs1.json",
        "properties": {
          "foo": {
            "$id": "http://example.com/schema-refs-absolute-uris-defs2.json",
            "$defs": {
              "inner": {
                "properties": {
                  "bar": {
                    "type": "string"
                  }
                }
              }
            },
            "$ref": "#/properties/foo/$defs/inner"
          }
        },
        "$ref": "#/properties/foo"
      },
      "referenced": {
        "$id": "http://example.com/schema-refs-absolute-uris-defs2.json",
        "$defs": {
          "inner": {
            "properties": {
              "bar": {
                "type": "string"
              }
            }
          }
        },
        "$ref": "#/properties/foo/$defs/inner"
      }
    }
  },
  {
    "description": "relative refs with absolute uris and defs",
    "schema": {
      "$id": "http://example.com/schema-refs-absolute-uris-defs1.json",
      "properties": {
        "foo": {
          "$id": "http://example.com/schema-refs-absolute-uris-defs2.json",
          "$defs": {
            "inner": {
              "properties": {
                "bar": {
                  "type": "string"
                }
              }
            }
          },
          "$ref": "#/properties/foo/$defs/inner"
        }
      },
      "$ref": "#/properties/foo"
    },
    "ref": "#/properties/foo/$defs/inner",
    "result": {
      "schema": {
        "$id": "http://example.com/schema-refs-absolute-uris-defs1.json",
        "properties": {
          "foo": {
            "$id": "http://example.com/schema-refs-absolute-uris-defs2.json",
            "$defs": {
              "inner": {
                "properties": {
                  "bar": {
                    "type": "string"
                  }
                }
              }
            },
            "$ref": "#/properties/foo/$defs/inner"
          }
        },
        "$ref": "#/properties/foo"
      },
      "referenced": {
        "properties": {
          "bar": {
            "type": "string"
          }
        }
      }
    }
  },
  {
    "description": "$id must be resolved against nearest parent, not just immediate parent",
    "schema": {
      "$id": "http://example.com/a.json",
      "$defs": {
        "x": {
          "$id": "http://example.com/b/c.json",
          "not": {
            "$defs": {
              "y": {
                "$id": "http://example.com/b/d.json",
                "type": "number"
              }
            }
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/$defs/x/not/$defs/y"
        }
      ]
    },
    "ref": "#/$defs/x/not/$defs/y",
    "result": {
      "schema": {
        "$id": "http://example.com/a.json",
        "$defs": {
          "x": {
            "$id": "http://example.com/b/c.json",
            "not": {
              "$defs": {
                "y": {
                  "$id": "http://example.com/b/d.json",
                  "type": "number"
                }
              }
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/$defs/x/not/$defs/y"
          }
        ]
      },
      "referenced": {
        "$id": "http://example.com/b/d.json",
        "type": "number"
      }
    }
  },
  {
    "description": "order of evaluation: $id and $ref",
    "schema": {
      "$id": "/draft2020-12/ref-and-id1/base.json",
      "$ref": "#/$defs/bigint",
      "$defs": {
        "bigint": {
          "$id": "draft2020-12/ref-and-id1/int.json",
          "maximum": 10
        },
        "smallint": {
          "$id": "draft2020-12/draft2020-12/ref-and-id1-int.json",
          "maximum": 2
        }
      }
    },
    "ref": "#/$defs/bigint",
    "result": {
      "schema": {
        "$id": "/draft2020-12/ref-and-id1/base.json",
        "$ref": "#/$defs/bigint",
        "$defs": {
          "bigint": {
            "$id": "draft2020-12/ref-and-id1/int.json",
            "maximum": 10
          },
          "smallint": {
            "$id": "draft2020-12/draft2020-12/ref-and-id1-int.json",
            "maximum": 2
          }
        }
      },
      "referenced": {
        "$id": "draft2020-12/ref-and-id1/int.json",
        "maximum": 10
      }
    }
  },
  {
    "description": "order of evaluation: $id and $anchor and $ref",
    "schema": {
      "$id": "/draft2020-12/ref-and-id2/base.json",
      "$ref": "#/$defs/bigint",
      "$defs": {
        "bigint": {
          "maximum": 10,
          "$id": "/draft2020-12/ref-and-id2/base.json#bigint"
        },
        "smallint": {
          "$id": "draft2020-12/draft2020-12/ref-and-id2#bigint",
          "maximum": 2
        }
      }
    },
    "ref": "#/$defs/bigint",
    "result": {
      "schema": {
        "$id": "/draft2020-12/ref-and-id2/base.json",
        "$ref": "#/$defs/bigint",
        "$defs": {
          "bigint": {
            "maximum": 10,
            "$id": "/draft2020-12/ref-and-id2/base.json#bigint"
          },
          "smallint": {
            "$id": "draft2020-12/draft2020-12/ref-and-id2#bigint",
            "maximum": 2
          }
        }
      },
      "referenced": {
        "maximum": 10,
        "$id": "/draft2020-12/ref-and-id2/base.json#bigint"
      }
    }
  },
  {
    "description": "simple URN base URI with $ref via the URN",
    "schema": {
      "$id": "urn:uuid:deadbeef-1234-ffff-ffff-4321feebdaed",
      "minimum": 30,
      "properties": {
        "foo": {
          "$ref": "#"
        }
      }
    },
    "ref": "#",
    "result": {
      "schema": {
        "$id": "urn:uuid:deadbeef-1234-ffff-ffff-4321feebdaed",
        "minimum": 30,
        "properties": {
          "foo": {
            "$ref": "#"
          }
        }
      },
      "referenced": {
        "$id": "urn:uuid:deadbeef-1234-ffff-ffff-4321feebdaed",
        "minimum": 30,
        "properties": {
          "foo": {
            "$ref": "#"
          }
        }
      }
    }
  },
  {
    "description": "simple URN base URI with JSON pointer",
    "schema": {
      "$id": "urn:uuid:deadbeef-1234-00ff-ff00-4321feebdaed",
      "properties": {
        "foo": {
          "$ref": "#/$defs/bar"
        }
      },
      "$defs": {
        "bar": {
          "type": "string"
        }
      }
    },
    "ref": "#/$defs/bar",
    "result": {
      "schema": {
        "$id": "urn:uuid:deadbeef-1234-00ff-ff00-4321feebdaed",
        "properties": {
          "foo": {
            "$ref": "#/$defs/bar"
          }
        },
        "$defs": {
          "bar": {
            "type": "string"
          }
        }
      },
      "referenced": {
        "type": "string"
      }
    }
  },
  {
    "description": "URN base URI with NSS",
    "schema": {
      "$id": "urn:example:1/406/47452/2",
      "properties": {
        "foo": {
          "$ref": "#/$defs/bar"
        }
      },
      "$defs": {
        "bar": {
          "type": "string"
        }
      }
    },
    "ref": "#/$defs/bar",
    "result": {
      "schema": {
        "$id": "urn:example:1/406/47452/2",
        "properties": {
          "foo": {
            "$ref": "#/$defs/bar"
          }
        },
        "$defs": {
          "bar": {
            "type": "string"
          }
        }
      },
      "referenced": {
        "type": "string"
      }
    }
  },
  {
    "description": "URN base URI with r-component",
    "schema": {
      "$id": "urn:example:foo-bar-baz-qux?+CCResolve:cc=uk",
      "properties": {
        "foo": {
          "$ref": "#/$defs/bar"
        }
      },
      "$defs": {
        "bar": {
          "type": "string"
        }
      }
    },
    "ref": "#/$defs/bar",
    "result": {
      "schema": {
        "$id": "urn:example:foo-bar-baz-qux?+CCResolve:cc=uk",
        "properties": {
          "foo": {
            "$ref": "#/$defs/bar"
          }
        },
        "$defs": {
          "bar": {
            "type": "string"
          }
        }
      },
      "referenced": {
        "type": "string"
      }
    }
  },
  {
    "description": "URN base URI with q-component",
    "schema": {
      "$id": "urn:example:weather?=op=map&lat=39.56&lon=-104.85&datetime=1969-07-21T02:56:15Z",
      "properties": {
        "foo": {
          "$ref": "#/$defs/bar"
        }
      },
      "$defs": {
        "bar": {
          "type": "string"
        }
      }
    },
    "ref": "#/$defs/bar",
    "result": {
      "schema": {
        "$id": "urn:example:weather?=op=map&lat=39.56&lon=-104.85&datetime=1969-07-21T02:56:15Z",
        "properties": {
          "foo": {
            "$ref": "#/$defs/bar"
          }
        },
        "$defs": {
          "bar": {
            "type": "string"
          }
        }
      },
      "referenced": {
        "type": "string"
      }
    }
  },
  {
    "description": "URN base URI with f-component",
    "schema": {
      "$ref": "https://json-schema.org/draft/2020-12/schema",
      "$id": "{$ref:https://json-schema.org/draft/2020-12/schema}"
    },
    "ref": "https://json-schema.org/draft/2020-12/schema",
    "result": {
      "schema": {
        "$id": "https://json-schema.org/draft/2020-12/schema",
        "$vocabulary": {
          "https://json-schema.org/draft/2020-12/vocab/core": true,
          "https://json-schema.org/draft/2020-12/vocab/applicator": true,
          "https://json-schema.org/draft/2020-12/vocab/unevaluated": true,
          "https://json-schema.org/draft/2020-12/vocab/validation": true,
          "https://json-schema.org/draft/2020-12/vocab/meta-data": true,
          "https://json-schema.org/draft/2020-12/vocab/format-annotation": true,
          "https://json-schema.org/draft/2020-12/vocab/content": true
        },
        "$dynamicAnchor": "meta",
        "title": "Core and Validation specifications meta-schema",
        "allOf": [
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/core"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/applicator"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/unevaluated"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/validation"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/meta-data"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/format-annotation"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/content"
          }
        ],
        "type": [
          "object",
          "boolean"
        ],
        "properties": {
          "definitions": {
            "type": "object",
            "additionalProperties": {
              "$dynamicRef": "#meta"
            },
            "deprecated": true,
            "default": {}
          },
          "dependencies": {
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                {
                  "$dynamicRef": "#meta"
                },
                {
                  "$ref": "https://json-schema.org/draft/2020-12/meta/validation#/$defs/stringArray"
                }
              ]
            },
            "deprecated": true,
            "default": {}
          },
          "$recursiveAnchor": {
            "$ref": "https://json-schema.org/draft/2020-12/meta/core#/$defs/anchorString",
            "deprecated": true
          },
          "$recursiveRef": {
            "$ref": "https://json-schema.org/draft/2020-12/meta/core#/$defs/uriReferenceString",
            "deprecated": true
          }
        }
      },
      "referenced": {
        "$id": "https://json-schema.org/draft/2020-12/schema",
        "$vocabulary": {
          "https://json-schema.org/draft/2020-12/vocab/core": true,
          "https://json-schema.org/draft/2020-12/vocab/applicator": true,
          "https://json-schema.org/draft/2020-12/vocab/unevaluated": true,
          "https://json-schema.org/draft/2020-12/vocab/validation": true,
          "https://json-schema.org/draft/2020-12/vocab/meta-data": true,
          "https://json-schema.org/draft/2020-12/vocab/format-annotation": true,
          "https://json-schema.org/draft/2020-12/vocab/content": true
        },
        "$dynamicAnchor": "meta",
        "title": "Core and Validation specifications meta-schema",
        "allOf": [
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/core"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/applicator"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/unevaluated"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/validation"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/meta-data"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/format-annotation"
          },
          {
            "$ref": "https://json-schema.org/draft/2020-12/meta/content"
          }
        ],
        "type": [
          "object",
          "boolean"
        ],
        "properties": {
          "definitions": {
            "type": "object",
            "additionalProperties": {
              "$dynamicRef": "#meta"
            },
            "deprecated": true,
            "default": {}
          },
          "dependencies": {
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                {
                  "$dynamicRef": "#meta"
                },
                {
                  "$ref": "https://json-schema.org/draft/2020-12/meta/validation#/$defs/stringArray"
                }
              ]
            },
            "deprecated": true,
            "default": {}
          },
          "$recursiveAnchor": {
            "$ref": "https://json-schema.org/draft/2020-12/meta/core#/$defs/anchorString",
            "deprecated": true
          },
          "$recursiveRef": {
            "$ref": "https://json-schema.org/draft/2020-12/meta/core#/$defs/uriReferenceString",
            "deprecated": true
          }
        }
      }
    }
  },
  {
    "description": "URN base URI with URN and JSON pointer ref",
    "schema": {
      "$id": "urn:uuid:deadbeef-1234-0000-0000-4321feebdaed",
      "properties": {
        "foo": {
          "$ref": "#/$defs/bar"
        }
      },
      "$defs": {
        "bar": {
          "type": "string"
        }
      }
    },
    "ref": "#/$defs/bar",
    "result": {
      "schema": {
        "$id": "urn:uuid:deadbeef-1234-0000-0000-4321feebdaed",
        "properties": {
          "foo": {
            "$ref": "#/$defs/bar"
          }
        },
        "$defs": {
          "bar": {
            "type": "string"
          }
        }
      },
      "referenced": {
        "type": "string"
      }
    }
  },
  {
    "description": "URN base URI with URN and anchor ref",
    "schema": {
      "$id": "urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed",
      "properties": {
        "foo": {
          "$ref": "#/$defs/bar"
        }
      },
      "$defs": {
        "bar": {
          "type": "string",
          "$id": "urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed#something"
        }
      }
    },
    "ref": "#/$defs/bar",
    "result": {
      "schema": {
        "$id": "urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed",
        "properties": {
          "foo": {
            "$ref": "#/$defs/bar"
          }
        },
        "$defs": {
          "bar": {
            "type": "string",
            "$id": "urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed#something"
          }
        }
      },
      "referenced": {
        "type": "string",
        "$id": "urn:uuid:deadbeef-1234-ff00-00ff-4321feebdaed#something"
      }
    }
  },
  {
    "description": "URN ref with nested pointer ref",
    "schema": {
      "$ref": "#/$defs/foo",
      "$defs": {
        "foo": {
          "$id": "urn:uuid:deadbeef-4321-ffff-ffff-1234feebdaed",
          "$defs": {
            "bar": {
              "type": "string"
            }
          },
          "$ref": "#/$defs/foo/$defs/bar"
        }
      },
      "$id": "{$ref:#/$defs/foo,$defs:{foo:{$id:urn:uuid:deadbeef-4321-ffff-ffff-1234feebdaed,$defs:{bar:{type:string}},$ref:#/$defs/foo/$defs/bar}}}"
    },
    "ref": "#/$defs/foo",
    "result": {
      "schema": {
        "$ref": "#/$defs/foo",
        "$defs": {
          "foo": {
            "$id": "urn:uuid:deadbeef-4321-ffff-ffff-1234feebdaed",
            "$defs": {
              "bar": {
                "type": "string"
              }
            },
            "$ref": "#/$defs/foo/$defs/bar"
          }
        },
        "$id": "{$ref:#/$defs/foo,$defs:{foo:{$id:urn:uuid:deadbeef-4321-ffff-ffff-1234feebdaed,$defs:{bar:{type:string}},$ref:#/$defs/foo/$defs/bar}}}"
      },
      "referenced": {
        "$id": "urn:uuid:deadbeef-4321-ffff-ffff-1234feebdaed",
        "$defs": {
          "bar": {
            "type": "string"
          }
        },
        "$ref": "#/$defs/foo/$defs/bar"
      }
    }
  },
  {
    "description": "URN ref with nested pointer ref",
    "schema": {
      "$ref": "#/$defs/foo",
      "$defs": {
        "foo": {
          "$id": "urn:uuid:deadbeef-4321-ffff-ffff-1234feebdaed",
          "$defs": {
            "bar": {
              "type": "string"
            }
          },
          "$ref": "#/$defs/foo/$defs/bar"
        }
      },
      "$id": "{$ref:#/$defs/foo,$defs:{foo:{$id:urn:uuid:deadbeef-4321-ffff-ffff-1234feebdaed,$defs:{bar:{type:string}},$ref:#/$defs/foo/$defs/bar}}}"
    },
    "ref": "#/$defs/foo/$defs/bar",
    "result": {
      "schema": {
        "$ref": "#/$defs/foo",
        "$defs": {
          "foo": {
            "$id": "urn:uuid:deadbeef-4321-ffff-ffff-1234feebdaed",
            "$defs": {
              "bar": {
                "type": "string"
              }
            },
            "$ref": "#/$defs/foo/$defs/bar"
          }
        },
        "$id": "{$ref:#/$defs/foo,$defs:{foo:{$id:urn:uuid:deadbeef-4321-ffff-ffff-1234feebdaed,$defs:{bar:{type:string}},$ref:#/$defs/foo/$defs/bar}}}"
      },
      "referenced": {
        "type": "string"
      }
    }
  }
]