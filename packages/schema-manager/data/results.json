[
  {
    "file": "./data/tests/ref.json",
    "cases": [
      {
        "case": "relative pointer ref to object",
        "schema": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "properties": {
            "foo": {
              "type": "integer"
            },
            "bar": {
              "$ref": "#/properties/foo"
            }
          }
        },
        "tests": [
          {
            "description": "match",
            "data": {
              "bar": 3
            },
            "valid": true
          }
        ]
      },
      {
        "case": "relative pointer ref to array",
        "schema": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "prefixItems": [
            {
              "type": "integer"
            },
            {
              "$ref": "#/prefixItems/0"
            }
          ]
        },
        "tests": [
          {
            "description": "mismatch array",
            "data": [
              1,
              "foo"
            ],
            "valid": false
          }
        ]
      },
      {
        "case": "escaped pointer ref",
        "schema": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$defs": {
            "tilde~field": {
              "type": "integer"
            },
            "slash/field": {
              "type": "integer"
            },
            "percent%field": {
              "type": "integer"
            }
          },
          "properties": {
            "tilde": {
              "$ref": "#/$defs/tilde~0field"
            },
            "slash": {
              "$ref": "#/$defs/slash~1field"
            },
            "percent": {
              "$ref": "#/$defs/percent%25field"
            }
          }
        },
        "tests": [
          {
            "description": "slash valid",
            "data": {
              "slash": 123
            },
            "valid": true
          },
          {
            "description": "tilde valid",
            "data": {
              "tilde": 123
            },
            "valid": true
          },
          {
            "description": "percent valid",
            "data": {
              "percent": 123
            },
            "valid": true
          }
        ]
      },
      {
        "case": "remote ref, containing refs itself",
        "schema": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$ref": "https://json-schema.org/draft/2020-12/schema"
        },
        "tests": [
          {
            "description": "remote ref valid",
            "data": {
              "minLength": 1
            },
            "valid": true
          }
        ]
      },
      {
        "case": "Recursive references between schemas",
        "schema": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "http://localhost:1234/draft2020-12/tree",
          "description": "tree of nodes",
          "type": "object",
          "properties": {
            "meta": {
              "type": "string"
            },
            "nodes": {
              "type": "array",
              "items": {
                "$ref": "node"
              }
            }
          },
          "required": [
            "meta",
            "nodes"
          ],
          "$defs": {
            "node": {
              "$id": "http://localhost:1234/draft2020-12/node",
              "description": "node",
              "type": "object",
              "properties": {
                "value": {
                  "type": "number"
                },
                "subtree": {
                  "$ref": "tree"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        },
        "tests": [
          {
            "description": "valid tree",
            "data": {
              "meta": "root",
              "nodes": [
                {
                  "value": 1,
                  "subtree": {
                    "meta": "child",
                    "nodes": [
                      {
                        "value": 1.1
                      },
                      {
                        "value": 1.2
                      }
                    ]
                  }
                },
                {
                  "value": 2,
                  "subtree": {
                    "meta": "child",
                    "nodes": [
                      {
                        "value": 2.1
                      },
                      {
                        "value": 2.2
                      }
                    ]
                  }
                }
              ]
            },
            "valid": true
          }
        ]
      },
      {
        "case": "ref creates new scope when adjacent to keywords",
        "schema": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$defs": {
            "A": {
              "unevaluatedProperties": false
            }
          },
          "properties": {
            "prop1": {
              "type": "string"
            }
          },
          "$ref": "#/$defs/A"
        },
        "tests": [
          {
            "description": "referenced subschema doesn't see annotations from properties",
            "data": {
              "prop1": "match"
            },
            "valid": false
          }
        ]
      },
      {
        "case": "naive replacement of $ref with its destination is not correct",
        "schema": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$defs": {
            "a_string": {
              "type": "string"
            }
          },
          "enum": [
            {
              "$ref": "#/$defs/a_string"
            }
          ]
        },
        "tests": [
          {
            "description": "match the enum exactly",
            "data": {
              "$ref": "#/$defs/a_string"
            },
            "valid": true
          }
        ]
      },
      {
        "case": "$id must be resolved against nearest parent, not just immediate parent",
        "schema": {
          "$schema": "https://json-schema.org/draft/2020-12/schema",
          "$id": "http://example.com/a.json",
          "$defs": {
            "x": {
              "$id": "http://example.com/b/c.json",
              "not": {
                "$defs": {
                  "y": {
                    "$id": "d.json",
                    "type": "number"
                  }
                }
              }
            }
          },
          "allOf": [
            {
              "$ref": "http://example.com/b/d.json"
            }
          ]
        },
        "tests": [
          {
            "description": "non-number is invalid",
            "data": "a",
            "valid": false
          }
        ]
      }
    ]
  }
]