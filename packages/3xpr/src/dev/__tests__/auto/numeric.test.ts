/* eslint-disable no-template-curly-in-string */
import { expressions as exp } from '../../../lib'

describe('numeric', () => {
	const context = JSON.parse('{"a":"1","b":2,"c":{"a":4,"b":5}}')
	test('lab', () => {
		expect(exp.eval('c.b', context)).toStrictEqual(5)
		expect(exp.eval('abs(-9)', context)).toStrictEqual(9)
		expect(exp.eval('acos(0.434)', context)).toStrictEqual(1.1218683324277348)
		expect(exp.eval('asin(0.434)', context)).toStrictEqual(0.44892799436716174)
		expect(exp.eval('atan(2)', context)).toStrictEqual(1.1071487177940904)
		expect(exp.eval('atan2(90, 15)', context)).toStrictEqual(1.4056476493802699)
		expect(exp.eval('ceil(2)', context)).toStrictEqual(2)
		expect(exp.eval('cos(2)', context)).toStrictEqual(-0.4161468365471424)
		expect(exp.eval('cosh(2)', context)).toStrictEqual(3.7621956910836314)
		expect(exp.eval('exp(7)', context)).toStrictEqual(1096.6331584284585)
		expect(exp.eval('floor(7)', context)).toStrictEqual(7)
		expect(exp.eval('ln(7)', context)).toStrictEqual(1.9459101490553132)
		expect(exp.eval('log(7,10)', context)).toStrictEqual(1.9459101490553132)
		expect(exp.eval('log10(7)', context)).toStrictEqual(0.8450980400142568)
		expect(exp.eval('remainder(7,2)', context)).toStrictEqual(1)
		expect(exp.eval('round(7.984938,2)', context)).toStrictEqual(7.98)
		expect(exp.eval('sign(-7)', context)).toStrictEqual(-1)
		expect(exp.eval('sin(7)', context)).toStrictEqual(0.6569865987187891)
		expect(exp.eval('sinh(7)', context)).toStrictEqual(548.3161232732465)
		expect(exp.eval('tan(7)', context)).toStrictEqual(0.8714479827243187)
		expect(exp.eval('tanh(7)', context)).toStrictEqual(0.9999983369439447)
		expect(exp.eval('trunc(7.984938,2)', context)).toStrictEqual(7)
	})
})
