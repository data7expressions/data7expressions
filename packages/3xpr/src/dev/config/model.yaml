operators:
  unary:
    '-':
      name: negative
      category: arithmetic
      priority: 9
      return: number
      params:
      - name: value
        type: number
    '~':
      name: bitNot
      category: bitwise
      priority: 5
      return: boolean
      params:
      - name: value
        type: boolean
    '!':
      name: not
      category: logical
      priority: 5
      return: boolean
      params:
      - name: value
        type: boolean
    '$':
      name: environmentVariable
      category: string
      priority: 9
      return: string
      params:
      - name: value
        type: string        
  binary:  
    '+': 
      name: addition
      category: arithmetic
      priority: 5
      return: T
      params:
      - name: a
        type: T
      - name: b
        type: T  
    '-':
      name: subtraction
      category: arithmetic
      priority: 5
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number 
    '*':
      name: multiplication
      category: arithmetic
      priority: 6
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number  
    '/':
      name: division
      category: arithmetic
      priority: 6
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number   
    '**':
      name: exponentiation
      category: arithmetic
      priority: 7
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number  
    '//':
      name: floorDivision
      category: arithmetic
      priority: 7
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number 
    '%':
      name: mod
      category: arithmetic
      priority: 8
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number 
    '&':
      name: bitAnd
      category: bitwise
      priority: 5
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number  
    '|':
      name: bitOr
      category: bitwise
      priority: 5
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number  
    '^':
      name: bitXor
      category: bitwise
      priority: 5 
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number  
    '<<':
      name: leftShift
      category: bitwise
      priority: 5
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number  
    '>>':
      name: rightShift
      category: bitwise
      priority: 5
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number  
    '==':
      name: equal
      category: comparison
      priority: 4
      return: boolean
      params:
      - name: a
        type: T
      - name: b
        type: T 
    '===':
      name: equal
      category: comparison
      priority: 4
      return: boolean
      params:
      - name: a
        type: T
      - name: b
        type: T     
    '!=':
      name: notEqual
      category: comparison
      priority: 4
      return: boolean
      params:
      - name: a
        type: T
      - name: b
        type: T 
    '!==':
      name: notEqual
      category: comparison
      priority: 4
      return: boolean
      params:
      - name: a
        type: T
      - name: b
        type: T
    '<>':
      name: notEqual
      category: comparison
      priority: 4
      return: boolean
      params:
      - name: a
        type: T
      - name: b
        type: T          
    '>':
      name: greaterThan
      category: comparison
      priority: 4
      return: boolean
      params:
      - name: a
        type: T
      - name: b
        type: T 
    '<':
      name: lessThan
      category: comparison
      priority: 4
      return: boolean
      params:
      - name: a
        type: T
      - name: b
        type: T  
    '>=':
      name: greaterThanOrEqual
      category: comparison
      priority: 4
      return: boolean
      params:
      - name: a
        type: T
      - name: b
        type: T   
    '<=':
      name: lessThanOrEqual
      category: comparison
      priority: 4 
      return: boolean
      params:
      - name: a
        type: T
      - name: b
        type: T 
    '&&':
      name: and
      category: logical
      priority: 3
      return: boolean
      params:
      - name: a
        type: boolean
      - name: b
        type: boolean 
    '||':
      name: or
      category: logical
      priority: 3
      return: boolean
      params:
      - name: a
        type: boolean
      - name: b
        type: boolean 
    '[]':
      name: item
      category: access
      description: Access an element of a array through the index
      priority: 2
      return: T
      params:
      - name: array
        type: T[]
      - name: index
        type: number   
    '=':
      name: assignment
      category: assignment
      priority: 1
      return: T
      params:
      - name: a
        type: T
      - name: b
        type: T 
    '+=':
      name: assignmentAddition
      category: assignment
      priority: 1
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number 
    '-=':
      name: assignmentSubtraction
      category: assignment
      priority: 1
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number  
    '*=':
      name: assignmentMultiplication
      category: assignment
      priority: 1
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number  
    '/=':
      name: assignmentDivision
      category: assignment
      priority: 1
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number  
    '**=':
      name: assignmentExponentiation
      category: assignment
      priority: 1
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number 
    '//=':
      name: assignmentFloorDivision
      category: assignment
      priority: 1
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number  
    '%=':
      name: assignmentMod
      category: assignment
      priority: 1
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number 
    '&=':
      name: assignmentBitAnd
      category: assignment
      priority: 1
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number 
    '|=':
      name: assignmentBitOr
      category: assignment
      priority: 1
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number  
    '^=':
      name: assignmentBitXor
      category: assignment
      priority: 1
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number 
    '<<=':
      name: assignmentLeftShift
      category: assignment
      priority: 1 
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number 
    '>>=':
      name: assignmentRightShift
      category: assignment
      priority: 1
      return: number
      params:
      - name: a
        type: number
      - name: b
        type: number 
  ternary:    
    '?':
      name: condicional
      category: flowControl
      priority: 1
      return: T
      params:
      - name: condition
        type: boolean
      - name: b
        type: T
      - name: b
        type: T     
functions:
# general:---------------------------------------------------------       
  sleep:
    description:  Delay a program execution for a given number of milliseconds.
    category: general 
    return: void
    params:
    - name: milliseconds
      type: number
  console:
    description:  Show a message on the console.
    category: general 
    return: void
    params:
    - name: value
      type: any       
# comparison:---------------------------------------------------------       
  between:
    description: Specifies how to retrieve values from an expression within a specific range.
    category: comparison 
    return: boolean
    params:
    - name: value
      type: T
    - name: from
      type: T 
    - name: to
      type: T  
  includes:
    description: Determines if an array includes a certain element	
    category: comparison 
    return: boolean
    params:    
    - name: array
      type: T[]
    - name: value
      type: T  
  in:
    description: Determines if an array includes a element or string includes substring	
    category: comparison 
    return: boolean
    params:
    - name: array
      type: T[]
    - name: value
      type: T    
  isNull:
    description: Evaluate if it is null
    category: comparison
    deterministic: true 
    return: boolean 
    params:
    - name: value 
      type: any
  isNotNull:
    description: Evaluate if it is not null
    category: comparison
    deterministic: true 
    return: boolean 
    params:
    - name: value 
      type: any
  isBoolean:
    description: Evaluate if it is boolean
    category: comparison
    deterministic: true 
    return: boolean 
    params:
    - name: value 
      type: any    
  isNumber:
    description: Evaluate if it is a number
    category: comparison
    deterministic: true 
    return: boolean 
    params:
    - name: value 
      type: any
  isInteger:
    description: Evaluate if it is a integer number
    category: comparison
    deterministic: true 
    return: boolean 
    params:
    - name: value 
      type: any
  isDecimal:
    description: Evaluate if it is a decimal number
    category: comparison
    deterministic: true 
    return: boolean 
    params:
    - name: value 
      type: any 
  isString:
    description: Evaluate if it is a string
    category: comparison
    deterministic: true 
    return: boolean 
    params:
    - name: value 
      type: any 
  isDate:
    description: Evaluate if it is a date
    category: comparison
    deterministic: true 
    return: boolean 
    params:
    - name: value 
      type: any
  isDateTime:
    description: Evaluate if it is a dateTime
    category: comparison
    deterministic: true 
    return: boolean 
    params:
    - name: value 
      type: any
  isTime:
    description: Evaluate if it is a time
    category: comparison
    deterministic: true 
    return: boolean 
    params:
    - name: value 
      type: any
  isObject:
    description: Evaluate if it is a object
    category: comparison
    deterministic: true 
    return: boolean 
    params:
    - name: value 
      type: any
  isArray:
    description: Evaluate if it is a array
    category: comparison
    deterministic: true 
    return: boolean 
    params:
    - name: value 
      type: any    
  isBooleanFormat:
    description: Evaluates if it has boolean format
    category: comparison
    deterministic: true 
    return: boolean 
    params:
    - name: value 
      type: any    
  isNumberFormat:
    description: Evaluates if it has number format
    category: comparison
    deterministic: true 
    return: boolean 
    params:
    - name: value 
      type: any
  isIntegerFormat:
    description: Evaluates if it has integer format
    category: comparison
    deterministic: true 
    return: boolean 
    params:
    - name: value 
      type: any
  isDecimalFormat:
    description: Evaluates if it has decimal format
    category: comparison
    deterministic: true 
    return: boolean 
    params:
    - name: value 
      type: any 
  isDateFormat:
    description: Evaluates if it has date format
    category: comparison
    deterministic: true 
    return: boolean 
    params:
    - name: value 
      type: any
  isDateTimeFormat:
    description: Evaluates if it has dateTime format
    category: comparison
    deterministic: true 
    return: boolean 
    params:
    - name: value 
      type: any
  isTimeFormat:
    description: Evaluates if it has time format
    category: comparison
    deterministic: true 
    return: boolean 
    params:
    - name: value 
      type: any                                      
# numeric:---------------------------------------------------------       
  abs:
    description: Get the absolute value     
    category: numeric
    deterministic: true 
    return: number
    params:
    - name: value
      type: number  
  acos:
    description: Get the arc cosine 
    category: numeric
    deterministic: true 
    return: number
    params:
    - name: value
      type: number  
  asin:
    description: Get the arc sine 
    category: numeric
    deterministic: true 
    return: number
    params:
    - name: value
      type: number  
  atan:
    description: Get the arc tangent 
    category: numeric
    deterministic: true 
    return: number
    params:
    - name: value
      type: number 
  atan2:
    description: Get the arc tangent of x and y 
    category: numeric
    deterministic: true 
    return: number
    params:
    - name: x
      type: number   
    - name: y
      type: number                     
  ceil:
    description: Get the smallest following integer 
    category: numeric
    deterministic: true 
    return: number
    params:
    - name: value
      type: number 
  cos:
    description: Get the cosine 
    category: numeric
    deterministic: true 
    return: number
    params:
    - name: value
      type: number  
  cosh:
    description: Get hyperbolic cosine 
    category: numeric
    deterministic: true 
    return: number
    params:
    - name: value
      type: number   
  exp:
    description:  Raise e to the nth power  
    category: numeric
    deterministic: true 
    return: number
    params:
    - name: value
      type: number  
  floor:
    description: Get the largest preceding integer 
    category: numeric
    deterministic: true 
    return: number
    params:
    - name: value
      type: number  
  ln:
    description: Get natural logarithm of num
    category: numeric
    deterministic: true 
    return: number
    params:
    - name: value
      type: number 
  log:
    description: Get logarithm, base num1, of num2 
    category: numeric
    deterministic: true 
    return: number
    params:
    - name: n1
      type: number   
    - name: n2
      type: number
  log10:
    description: Return the base 10 logarithm of x 
    category: numeric
    deterministic: true 
    return: number
    params:
    - name: value
      type: number      
  remainder:
    description: Get remainder
    category: numeric
    deterministic: true 
    return: number
    params:
    - name: n1
      type: number   
    - name: n2
      type: number                       
  round:
    description: Get rounded value
    category: numeric
    deterministic: true  
    return: number
    params:
    - name: value
      type: number
    - name: decimals
      type: number 
  sign:
    description: Get sign of exp 
    category: numeric
    deterministic: true 
    return: number
    params:
    - name: value
      type: number  
  sin:
    description: Get sine 
    category: numeric
    deterministic: true 
    return: number
    params:
    - name: value
      type: number 
  sinh:
    description: Get hyperbolic sine
    category: numeric
    deterministic: true 
    return: number
    params:
    - name: value
      type: number
  tan:
    description: Get tangent
    category: numeric
    deterministic: true 
    return: number
    params:
    - name: value
      type: number   
  tanh:
    description: Get hyperbolic tangent 
    category: numeric
    deterministic: true 
    return: number
    params:
    - name: value
      type: number  
  trunc:
    description: Truncate num 
    category: numeric
    deterministic: true 
    return: number
    params:
    - name: value
      type: number                   
# string:---------------------------------------------------------
  chr:
    description: Get character from ASCII code 
    category: string
    deterministic: true 
    return: string
    params:
    - name: ascii
      type: number
  strCount:
    description: Count value in source 
    category: string
    deterministic: true 
    return: number
    params:
    - name: source
      type: string
    - name: value
      type: string       
  title:
    description: Capitalize words 
    category: string
    deterministic: true 
    return: string
    params:
    - name: value
      type: string 
  lower:
    description: Lowercase string
    category: string
    deterministic: true 
    return: string
    params:
    - name: value
      type: string 
  lpad:
    description: Pad the left-side of string 
    category: string
    deterministic: true 
    return: string
    params:
    - name: value
      type: string
    - name: len
      type: number 
    - name: pad
      type: string  
  ltrim:
    description: Remove leading chars
    category: string
    deterministic: true 
    return: string
    params:
    - name: value
      type: string
  replace:
    description: The replace() method searches a string for a specified value and returns a new string where the specified values are replaced. 
    category: string
    deterministic: true 
    return: string
    params:
    - name: value
      type: string
    - name: source
      type: string 
    - name: target
      type: string                         
  rpad:
    description: Pad the right-side of string 
    category: string 
    deterministic: true
    return: string
    params:
    - name: value
      type: string
    - name: len
      type: number 
    - name: pad
      type: string 
  rtrim:
    description: Remove trailing spaces 
    category: string
    deterministic: true 
    return: string
    params:
    - name: value
      type: string    
  substr:
    description: Get a substring of string  
    category: string
    deterministic: true 
    return: string
    params:
    - name: value
      type: string
    - name: from
      type: number 
    - name: count
      type: number
  substring:
    description: Get a substring of string  
    category: string
    deterministic: true 
    return: string
    params:
    - name: value
      type: string
    - name: from
      type: number 
    - name: count
      type: number      
  trim:
    description: Remove characters 
    category: string
    deterministic: true 
    return: string
    params:
    - name: value
      type: string 
  upper:
    description: Uppercase string
    category: string
    deterministic: true 
    return: string
    params:
    - name: value
      type: string  
  concat:
    description: String concatenation
    category: string
    deterministic: true
    multipleParams: true 
    return: string    
    params:
    - name: values
      type: string
  concatenate:
    description: String concatenation
    category: string
    deterministic: true
    multipleParams: true 
    return: string    
    params:
    - name: values
      type: string    
  capitalize:
    description: Make the first character have upper case and the rest lower case
    category: string
    deterministic: true
    return: string    
    params:
    - name: value
      type: string
  test:
    description: Try a match on a string. Returns true or false.
    category: string
    deterministic: true
    return: boolean    
    params:
    - name: value
      type: any
    - name: regexp
      type: string
  match:
    description: Returns an array containing all matches, including capturing groups, or null if no matches are found.
    category: string
    deterministic: true
    return: boolean    
    params:
    - name: value
      type: string
    - name: regexp
      type: string
  mask:
    description: General-purpose function that mask parts of arbitrary strings based on position within the string
    category: string
    deterministic: true
    return: string    
    params:
    - name: value
      type: string  
  startWith:
    description: Indicates whether a text string begins with the characters of a given text string.  
    category: string
    deterministic: true 
    return: boolean
    params:
    - name: value
      type: string
    - name: stringSearched
      type: string  
    - name: position
      type: number
  startsWith:
    description: Indicates whether a text string begins with the characters of a given text string.  
    category: string
    deterministic: true 
    return: boolean
    params:
    - name: value
      type: string
    - name: stringSearched
      type: string  
    - name: position
      type: number
  like:
    description: Indicates whether a text string matches a specified pattern.  
    category: string
    deterministic: true 
    return: boolean
    params:
    - name: value
      type: string
    - name: pattern
      type: string    
  isEmpty:
    description: Evaluate if it is empty
    category: string
    deterministic: true 
    return: boolean 
    params:
    - name: value 
      type: string
  isNotEmpty:
    description: Evaluate if it is not empty
    category: string
    deterministic: true 
    return: boolean 
    params:
    - name: value 
      type: string   
# dateTime :---------------------------------------------------------
  curTime:
    description: Get the current time 
    category: dateTime 
    return: Date
  today:
    description: Get the current date 
    category: dateTime 
    return: Date 
  now:
    description: Get the current dateTime 
    category: dateTime 
    return: Date
  time:
    description: Convert string to time
    category: dateTime
    deterministic: true 
    return: Date 
    params:
    - name: value
      type: string 
  date:
    description: Convert string to date
    category: dateTime
    deterministic: true 
    return: Date 
    params:
    - name: value
      type: string  
  dateTime:
    description: Convert string to dateTime
    category: dateTime
    deterministic: true 
    return: Date 
    params:
    - name: value
      type: string              
  year:
    description: Get year from date
    category: dateTime
    deterministic: true 
    return: number 
    params:
    - name: value
      type: Date
  month:
    description: Get month from date
    category: dateTime
    deterministic: true 
    return: number 
    params:
    - name: value
      type: Date     
  day:
    description: Get day of month from date
    category: dateTime
    deterministic: true 
    return: number 
    params:
    - name: value
      type: Date
  weekday:
    description: get date of week from date
    category: dateTime
    deterministic: true 
    return: number 
    params:
    - name: value
      type: Date
  hour:
    description: get hour from date
    category: dateTime
    deterministic: true 
    return: number 
    params:
    - name: value
      type: Date
  minute:
    description: Get minute from date
    category: dateTime
    deterministic: true 
    return: number 
    params:
    - name: value
      type: Date    
  second:
    description: Get second from date
    category: dateTime
    deterministic: true 
    return: number 
    params:
    - name: value
      type: Date
  millisecond:
    description: Get millisecond from date
    category: dateTime
    deterministic: true 
    return: number 
    params:
    - name: value
      type: Date    
  addYear:
    description: Add years to a date
    category: dateTime
    deterministic: true 
    return: Date 
    params:
    - name: date
      type: Date
    - name: value
      type: number 
  addMonth:
    description: Add months to a date
    category: dateTime
    deterministic: true 
    return: Date 
    params:
    - name: date
      type: Date
    - name: value
      type: number 
  addDay:
    description: Add days to a date
    category: dateTime
    deterministic: true 
    return: Date 
    params:
    - name: date
      type: Date
    - name: value
      type: number
  addHour:
    description: Add hours to a date
    category: dateTime
    deterministic: true 
    return: Date 
    params:
    - name: date
      type: Date
    - name: value
      type: number 
  addMinute:
    description: Add minutes to a date
    category: dateTime
    deterministic: true 
    return: Date 
    params:
    - name: date
      type: Date
    - name: value
      type: number 
  addSecond:
    description: Add seconds to a date
    category: dateTime
    deterministic: true 
    return: Date 
    params:
    - name: date
      type: Date
    - name: value
      type: number 
  addMillisecond:
    description: Add milliseconds to a date
    category: dateTime
    deterministic: true 
    return: Date 
    params:
    - name: date
      type: Date
    - name: value
      type: number      
  addTime:
    description: Add time to a date
    category: dateTime
    deterministic: true 
    return: Date 
    params:
    - name: date
      type: Date
    - name: time
      type: Date 
  subtractTime:
    description: subtract time to a date
    category: dateTime
    deterministic: true 
    return: Date 
    params:
    - name: date
      type: Date
    - name: time
      type: Date 
  yearDiff:
    description: difference between two dates in years
    category: dateTime
    deterministic: true 
    return: Date 
    params:
    - name: date
      type: Date
    - name: date2
      type: Date 
  dayDiff:
    description: difference between two dates in days
    category: dateTime
    deterministic: true 
    return: Date 
    params:
    - name: date
      type: Date
    - name: date2
      type: Date 
  hourDiff:
    description: difference between two dates in hours
    category: dateTime
    deterministic: true 
    return: Date 
    params:
    - name: time
      type: Date
    - name: time2
      type: Date
  secondDiff:
    description: difference between two dates in seconds
    category: dateTime
    deterministic: true 
    return: Date 
    params:
    - name: time
      type: Date
    - name: time2
      type: Date 
  millisecondDiff:
    description: difference between two dates in milliseconds
    category: dateTime
    deterministic: true 
    return: Date 
    params:
    - name: time
      type: Date
    - name: time2
      type: Date
  dayToDate:
    description: days to  Date
    category: dateTime
    deterministic: true 
    return: Date 
    params:
    - name: value
      type: number
  hourToDate:
    description: hours to  Date
    category: dateTime
    deterministic: true 
    return: Date 
    params:
    - name: value
      type: number 
  secondToDate:
    description: seconds to  Date
    category: dateTime
    deterministic: true 
    return: Date 
    params:
    - name: value
      type: number  
  millisecondToDate:
    description: milliseconds to Date
    category: dateTime
    deterministic: true 
    return: Date 
    params:
    - name: value
      type: number
# null: ---------------------------------------------------------
  nvl:
    description: Allows you to replace null values with a default value. 
    category: nullable
    deterministic: true 
    return: T 
    params:
    - name: value 
      type: T 
    - name: _default 
      type: T  
  nvl2:
    description: It lets you substitutes a value when a null value is encountered as well as when a non-null value is encountered.
    category: nullable
    deterministic: true 
    return: T 
    params:
    - name: value 
      type: T 
    - name: a 
      type: T  
    - name: b 
      type: T         
# array: ---------------------------------------------------------
  foreach:
    description: Calls a function for each element in an array.
    type: arrow
    category: arrow 
    return: void 
    params:
    - name: array 
      type: any[]
    - name: method 
      type: function
  each:
    description: Calls a function for each element in an array.
    type: arrow
    category: arrow 
    return: void 
    params:
    - name: array 
      type: any[]
    - name: method 
      type: predicate   
  filter:
    description: Creates a new array filled with elements that pass a test provided by a function
    type: arrow
    category: arrow 
    return: T[] 
    params:
    - name: array 
      type: T[]
    - name: method 
      type: predicate
  where:
    description: Creates a new array filled with elements that pass a test provided by a function
    type: arrow
    category: arrow 
    return: T[] 
    params:
    - name: array 
      type: T[]
    - name: method 
      type: function
  map:
    description: Creates a new array from calling a function for every array element.
    type: arrow
    category: arrow 
    return: T[] 
    params:
    - name: array 
      type: any[]
    - name: predicate 
      type: T 
  select:
    description: Creates a new array from calling a function for every array element.
    type: arrow
    category: arrow 
    return: T[]
    params:
    - name: array 
      type: any[]
    - name: predicate 
      type: T     
  sort:
    description: Sorts the elements of an array.
    type: arrow
    category: arrow 
    return: T[] 
    params:
    - name: array 
      type: T[]
    - name: predicate 
      type: any
  order:
    description: Sorts the elements of an array.
    type: arrow
    category: arrow 
    return: T[] 
    params:
    - name: array 
      type: T[]
    - name: predicate 
      type: any     
  reverse:
    description:  Reverses the order of the elements in an array.
    type: arrow 
    category: arrow 
    return: T[] 
    params:
    - name: array 
      type: T[]
    - name: predicate 
      type: any
  remove:
    description: Eliminate the elements of the array that meet the filter condition
    type: arrow
    category: arrow 
    return: T[]
    params:
    - name: array 
      type: T[]
    - name: predicate 
      type: boolean
  delete:
    description: Eliminate the elements of the array that meet the filter condition
    type: arrow
    category: arrow 
    return: T[] 
    params:
    - name: array 
      type: T[]
    - name: predicate 
      type: boolean   
  push:
    description: Adds new items to the end of an array
    type: child
    category: array 
    return: T[] 
    params:
    - name: array 
      type: T[]
    - name: value 
      type: T
  insert:
    description: Adds new items to the end of an array
    type: child
    category: array 
    return: T[] 
    params:
    - name: array 
      type: T[]
    - name: value 
      type: T      
  pop:
    description: Removes (pops) the last element of an array and return element
    type: child
    category: array 
    return: T 
    params:
    - name: array 
      type: T[]
  length:
    description: Calculating the number of items in a array.
    type: child
    category: array 
    return: number 
    params:
    - name: array 
      type: T[]  
  len:
    description: Calculating the number of items in a array.
    type: child
    category: array 
    return: number 
    params:
    - name: array 
      type: T[]
  slice:
    description: Returns a copy of a portion of the array into a new array from start to end.
    type: child
    category: array 
    return: T[] 
    params:
    - name: array 
      type: T[]
    - name: from 
      type: number
    - name: to 
      type: number
  page:
    description: Returns a portion of the records.
    type: child
    category: array 
    return: T[]  
    params:
    - name: array 
      type: T[]   
    - name: page 
      type: integer
    - name: records 
      type: integer             
# group: ---------------------------------------------------------
  distinct:
    description: Is used to retrieve unique values from a array
    type: arrow
    category: group 
    return: any[] 
    params:
    - name: array 
      type: any[]
    - name: predicate 
      type: any   
  count:
    description: Returns the number of rows in a set
    type: arrow
    category: group 
    return: integer 
    params:
    - name: array 
      type: any[]
    - name: predicate 
      type: boolean
  max:
    description: Returns the maximum of rows in a set
    type: arrow
    category: group
    return: T
    params:
    - name: array 
      type: T[]
    - name: predicate 
      type: boolean
  min:
    description: Returns the minimum of rows in a set
    type: arrow
    category: group
    return: T
    params:
    - name: array 
      type: T[]
    - name: predicate 
      type: boolean
  sum:
    description: Returns the sum of rows in a set
    type: arrow
    category: group
    return: number
    params:
    - name: array 
      type: any[]
    - name: predicate 
      type: number
  avg:
    description: Returns the average of rows in a set
    type: arrow
    category: group
    return: number
    params:
    - name: array 
      type: T[]
    - name: predicate 
      type: number
  first:
    description:  Returns the first value of the array that meets a condition
    type: arrow
    category: group 
    return: T 
    params:
    - name: array 
      type: T[]
    - name: predicate 
      type: boolean
  last:
    description: Returns the last value of the array that meets a condition
    type: arrow
    category: group 
    return: T 
    params:
    - name: array 
      type: T[]
    - name: predicate 
      type: boolean              
# conversion: --------------------------------------------------------- 
  toString:
    description: convert to string
    category: conversion
    deterministic: true 
    return: string 
    params:
    - name: value
      type: any
  toNumber:
    description: convert to number
    category: conversion
    deterministic: true 
    return: number 
    params:
    - name: value 
      type: string
  dateToString:
    description: Convert date to string with ISO 8601 format
    category: conversion
    return: string
    params:
      - name: value
        type: Date
  # https://www.samanthaming.com/tidbits/76-converting-object-to-array/
  keys:
    description: Convert all keys of an object to an array
    category: conversion
    return: string[]
    params:
      - name: obj
        type: any
  values:
    description: Extract the values of an object into an array
    category: conversion
    return: any[]
    params:
      - name: obj
        type: any
  entries:
    description: Extract the keys and values of an object into an array
    category: conversion
    return: tuple(string,any)[] 
    params:
      - name: obj
        type: object
  fromEntries:
    description: Convert a generated array with entries into an object
    category: conversion
    return: object
    params:
      - name: array
        type: tuple(string,any)[]                               
  stringify:
    description: Convert a JavaScript object or value to a JSON text string.
    category: conversion
    deterministic: true 
    return: string 
    params:
    - name: value
      type: any
  parse:
    description: Parses a text string as JSON, optionally transforming the value produced by the parse.
    category: conversion
    deterministic: true 
    return: any 
    params:
    - name: value
      type: string
# sets: ---------------------------------------------------------
# https://www.javatpoint.com/algebra-of-sets
# https://es.wikipedia.org/wiki/%C3%81lgebra_de_conjuntos#:~:text=La%20uni%C3%B3n%20de%20dos%20conjuntos,comunes%20de%20A%20y%20B.   
  union:
    description: Is the set A U B that contains all the elements of A and B.
    type: child
    category: sets 
    deterministic: true 
    return: T[] 
    params:
    - name: a
      type: T[]
    - name: b
      type: T[]
  intersection:
    description: Is the set A \ B that contains all the elements of A that do not belong to B.
    type: child
    category: sets 
    deterministic: true 
    return: T[] 
    params:
    - name: a
      type: T[]
    - name: b
      type: T[] 
  difference:
    description: Is the set containing all the elements of A that do not belong to B
    type: child
    category: sets 
    deterministic: true 
    return: T[] 
    params:
    - name: a
      type: T[]
    - name: b
      type: T[]
  symmetricDifference:
    description: Is the set containing the elements of A and B that are not common
    type: child
    category: sets 
    deterministic: true 
    return: T[] 
    params:
    - name: a
      type: T[]
    - name: b
      type: T[]
formats:
  email: ^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$
  integer: ^\d+$
  decimal: ^\d+\.\d+$
  string: ^[a-zA-Z0-9_.]+$
  # https://stackoverflow.com/questions/3143070/javascript-regex-iso-dateTime
  date: ^\d{4}-\d{2}-\d{2}$
  dateTime: \d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)
  time: \[0-2]\d:[0-5]\d:[0-5]\d
constants:
  true: true
  false: false
  null: null
  pi: 3.14159265359
enums:
  DayOfWeek:
    Sunday: 0
    Monday: 1
    Tuesday: 2
    Wednesday: 3
    Thursday: 4
    Friday: 5
    Saturday: 6 
